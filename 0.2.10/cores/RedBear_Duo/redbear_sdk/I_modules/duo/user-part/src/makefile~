
# Define the compiler/tools prefix
ARM_GCC_PATH = D:/GCC/bin
GCC_PREFIX = $(ARM_GCC_PATH)/arm-none-eabi-

# Define tools
CC = $(GCC_PREFIX)gcc
AR = $(GCC_PREFIX)ar
OBJCOPY = $(GCC_PREFIX)objcopy

RM = rm -f
MKDIR = mkdir -p

# Recursive wildcard function
rwildcard = $(wildcard $1$2) $(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2))

# Define the build path, this is where all of the dependancies and
# object files will be placed.
# Note: Currently set to <project>/build/obj directory and set relative to
# the dir which makefile is invoked. If the makefile is moved to the project
# root, BUILD_PATH = build can be used to store the build products in 
# the build directory.
BUILD_PATH = .

# Path to the root of source files, in this case root of the project to
# inclue ../src and ../lib dirs.
# Note: Consider relocating source files in lib to src, or build a
#       seperate library.
SRC_PATH = .

# Target this makefile is building.
TARGET = libcore.a


CSRC := $(wildcard *.c)
CPPSRC := $(wildcard *.cpp)
ASRC := $(wildcard *.s)





# Additional include directories, applied to objects built for this target.
CORE_PATH = ../../../../..

# Additional include directories, applied to objects built for this target.

INCLUDE_DIRS += $(CORE_PATH)/CMSIS/CMSIS/Include
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/A_user/inc
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/E_rt-dynalib/inc
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/F_wiring/inc
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/H_platform/shared/inc
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/H_platform/MCU/shared/STM32/inc
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/H_platform/MCU/STM32F2xx/STM32_StdPeriph_Driver/inc
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/H_platform/MCU/STM32F2xx/SPARK_Firmware_Driver/inc
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/H_platform/MCU/STM32F2xx/STM32_USB_Device_Driver/inc
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/H_platform/MCU/STM32F2xx/STM32_USB_OTG_Driver/inc
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/H_platform/MCU/STM32F2xx/CMSIS/Device/ST/Include
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/I_modules/duo/user-part/inc
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/I_modules/shared/stm32f2xx/inc

INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_define
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_hal/inc
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_hal/shared
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_hal/src/stm32f2xx
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_hal/src/stm32
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_hal/src/duo
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_hal/src/duo/include 
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_hal/src/duo/libraries/btstack/port
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_hal/src/duo/libraries/btstack/src
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_hal/src/duo/libraries/btstack/src/ble
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_hal/src/duo/libraries/btstack/src/classic
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_services/inc
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_system/inc
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_communication/src
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_lib
INCLUDE_DIRS += $(CORE_PATH)/../../system/CMSIS/CMSIS/Include
INCLUDE_DIRS += $(CORE_PATH)/redbear_sdk/X_dynalib/inc

# Compiler flags
CFLAGS =  -g3 -gdwarf-2 -Os -mcpu=cortex-m3 -mthumb
# * <-------------------参照Arduino添加的部分
CFLAGS += -w -std=gnu99 -fno-common -fno-exceptions -fno-builtin-malloc -fno-builtin-free -fno-builtin-realloc -fdata-sections -fomit-frame-pointer -nostdlib --param max-inline-insns-single=500 -fno-exceptions -fno-rtti
CFLAGS += -DSTM32_DEVICE -DSTM32F2XX -DPLATFORM_THREADING=1 -DPLATFORM_ID=88 -DPLATFORM_NAME=duo -DUSBD_VID_SPARK=0x2B04 -DUSBD_PID_DFU=0xD058 -DUSBD_PID_CDC=0xC058 
CFLAGS += -DSTART_DFU_FLASHER_SERIAL_SPEED=14400 -DSTART_YMODEM_FLASHER_SERIAL_SPEED=28800 -DSTART_AVRDUDE_FLASHER_SERIAL_SPEED=19200
CFLAGS += -DRELEASE_BUILD -DINCLUDE_PLATFORM=1 -DUSE_STDPERIPH_DRIVER -DDFU_BUILD_ENABLE
CFLAGS += -DUSER_FIRMWARE_IMAGE_SIZE=0x40000 -DUSER_FIRMWARE_IMAGE_LOCATION=0x80C0000
CFLAGS += -DSYSTEM_VERSION_STRING=0.2.4
CFLAGS += -DMODULAR_FIRMWARE=1 -DMODULE_FUNCTION=5 -DMODULE_INDEX=1 -DMODULE_VERSION=7 -DMODULE_DEPENDENCY=4,2,7
CFLAGS += -DF_CPU=120000000 -DARDUINO=10611
# * ------------------------------------------------>
CFLAGS += $(patsubst %,-I$(SRC_PATH)/%,$(INCLUDE_DIRS)) -I.
CFLAGS += -ffunction-sections -Wall -Werror -fmessage-length=0

# Generate dependancy files automatically.
#CFLAGS += -MD -MP -MF $@.d



# C++ specific flags
#CPPFLAGS = -fno-exceptions -fno-rtti
CPPFLAGS =  -g3 -gdwarf-2 -Os -mcpu=cortex-m3 -mthumb
# * <-------------------参照Arduino添加的部分
CPPFLAGS += -w -std=gnu++11 -fno-common -fno-exceptions -fno-builtin-malloc -fno-builtin-free -fno-builtin-realloc -fdata-sections -fomit-frame-pointer -nostdlib --param max-inline-insns-single=500 -fno-exceptions -fno-rtti
CPPFLAGS += -DSTM32_DEVICE -DSTM32F2XX -DPLATFORM_THREADING=1 -DPLATFORM_ID=88 -DPLATFORM_NAME=duo -DUSBD_VID_SPARK=0x2B04 -DUSBD_PID_DFU=0xD058 -DUSBD_PID_CDC=0xC058 
CPPFLAGS += -DSTART_DFU_FLASHER_SERIAL_SPEED=14400 -DSTART_YMODEM_FLASHER_SERIAL_SPEED=28800 -DSTART_AVRDUDE_FLASHER_SERIAL_SPEED=19200
CPPFLAGS += -DRELEASE_BUILD -DINCLUDE_PLATFORM=1 -DUSE_STDPERIPH_DRIVER -DDFU_BUILD_ENABLE
CPPFLAGS += -DUSER_FIRMWARE_IMAGE_SIZE=0x40000 -DUSER_FIRMWARE_IMAGE_LOCATION=0x80C0000
CPPFLAGS += -DSYSTEM_VERSION_STRING=0.2.4
CPPFLAGS += -DMODULAR_FIRMWARE=1 -DMODULE_FUNCTION=5 -DMODULE_INDEX=1 -DMODULE_VERSION=7 -DMODULE_DEPENDENCY=4,2,7
CPPFLAGS += -DF_CPU=120000000 -DARDUINO=10611
# * ------------------------------------------------>
CPPFLAGS += $(patsubst %,-I$(SRC_PATH)/%,$(INCLUDE_DIRS)) -I.
CPPFLAGS += -ffunction-sections -Wall -Werror -fmessage-length=0
#CPPFLAGS += -MD -MP -MF $@.d

# Collect all object and dep files
ALLOBJ += $(addprefix $(BUILD_PATH)/, $(CSRC:.c=.o))
ALLOBJ += $(addprefix $(BUILD_PATH)/, $(CPPSRC:.cpp=.o))
ALLOBJ += $(addprefix $(BUILD_PATH)/, $(ASRC:.s=.o))

ALLDEPS += $(addprefix $(BUILD_PATH)/, $(CSRC:.c=.o.d))
ALLDEPS += $(addprefix $(BUILD_PATH)/, $(CPPSRC:.cpp=.o.d))
ALLDEPS += $(addprefix $(BUILD_PATH)/, $(ASRC:.s=.o.d))

# All Target
all: check_external_deps $(TARGET)

# Check for external dependancies, none in this case.
check_external_deps:

# Tool invocations
$(TARGET) : $(ALLOBJ)
	@echo 'Building target: $@'
	@echo 'Invoking: ARM GCC Archiver'
	$(AR) -rcs $@ $^
	@echo ' '

# C compiler to build .o from .c in $(BUILD_DIR)
$(BUILD_PATH)/%.o : $(SRC_PATH)/%.c
	@echo Building file: $<
	@echo Invoking: ARM GCC C Compiler
	$(MKDIR) $(dir $@)
	$(CC) $(CFLAGS) -c -o $@ $<
	@echo

# CPP compiler to build .o from .cpp in $(BUILD_DIR)
# Note: Calls standard $(CC) - gcc will invoke g++ as appropriate
$(BUILD_PATH)/%.o : $(SRC_PATH)/%.cpp
	@echo Building file: $<
	@echo Invoking: ARM GCC CPP Compiler
	$(MKDIR) $(dir $@)
	$(CPP) $(CPPFLAGS) -c -o $@ $<
	@echo

# Other Targets
clean:
	$(RM) $(ALLOBJ) $(ALLDEPS) $(TARGET)
	@echo ' '

.PHONY: all clean
.SECONDARY:

# Include auto generated dependancy files
-include $(ALLDEPS)


